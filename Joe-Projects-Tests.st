TestCase subclass: #EncrypterTest	instanceVariableNames: 'encrypter'	classVariableNames: ''	poolDictionaries: ''	category: 'Joe-Projects-Tests'!!EncrypterTest commentStamp: '<historical>' prior: 0!An EncrypterTest is a test class for testing the behavior of Encrypter!!EncrypterTest methodsFor: 'as yet unclassified' stamp: 'joejohnston 9/19/2013 14:23'!setUp	encrypter := Encrypter new.	! !!EncrypterTest methodsFor: 'as yet unclassified' stamp: 'joejohnston 9/19/2013 14:23'!tearDown 	encrypter := nil.! !!EncrypterTest methodsFor: 'as yet unclassified' stamp: 'joejohnston 9/19/2013 20:21'!testAlphabet	self assert: encrypter alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.! !!EncrypterTest methodsFor: 'as yet unclassified' stamp: 'joejohnston 9/19/2013 15:47'!testFrequencyAnalysisOn	| result |	result := encrypter frequencyAnalysisOn: encrypter alphabet.	self assert: result size = 26.	self assert: result first key = $A.	self assert: result last key = $Z.	result do: [ :each | self assert: each value = 1. ].	result := encrypter frequencyAnalysisOn: 'The Rain in Spain, Falls mainly in the plains.' asUppercase onlyLetters.	self assert: result size = 26.	self assert: (result at: 19) key = $S.	self assert: (result at: 19) value = 3.	self assert: result last value = 0.! !!EncrypterTest methodsFor: 'tests-helper' stamp: 'joejohnston 9/19/2013 19:45'!testIndexOfCoincidenceIn	| result |	result := encrypter indexOfCoincidenceIn: 'the Rain in spain falls, Mainly in the PLAINS.'.	self assert: result = 0.08412698412698412. ! !!EncrypterTest methodsFor: 'tests' stamp: 'jj 9/23/2013 20:18'!testCaesarShiftOn	| result |	result := encrypter caesarShift: 5 on: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.	self assert: result = 'FGHIJKLMNOPQRSTUVWXYZABCDE'.! !!EncrypterTest methodsFor: 'tests' stamp: 'jj 9/23/2013 20:20'!testColumnarTranspositionLengthOn	| result |	result := encrypter columnarTranspositionLength: 5 on: 'aaaaabbbbbcccccdd'.	self assert: result = 'abcdabcdabcabcabc' asUppercase .! !!EncrypterTest methodsFor: 'tests' stamp: 'joejohnston 11/24/2013 21:55'!testDecryptRSACipherWithDAndN	| result |	result := encrypter decryptRSACipher: 1394 withD: 2011 andN: 3127.	self assert: result = 89.! !!EncrypterTest methodsFor: 'tests' stamp: 'jj 9/23/2013 23:52'!testDecryptVigenereCipherUsingOn	| result |	result := encrypter decryptVigenereCipherUsing: 'DIM' on: 'PMQWUQRVFKMORZZHZMIBQUKXDAE'.	self assert: result = 'MEETMEONTHECORNERAFTERCLASS'.! !!EncrypterTest methodsFor: 'tests' stamp: 'jj 9/24/2013 00:39'!testEncryptPolybiusOn	|result|	result := encrypter encryptPolybiusOn: 'james went around the corner'.	self assert: result = '141132154352153344114234453314442315133442331542'.! !!EncrypterTest methodsFor: 'tests' stamp: 'joejohnston 11/24/2013 21:57'!testEncryptRSAMessageWithEAndN	"the plaintext message is 89	the private key is 2011"	| result |	result := encrypter encryptRSAMessage: 89 withE: 3 andN: 3127.	self assert: result = 1394.	self assert: (encrypter decryptRSACipher: result withD: 2011 andN: 3127) =  89.! !!EncrypterTest methodsFor: 'tests' stamp: 'jj 9/24/2013 00:31'!testGetPolybiusNumberFor	| result |	result := encrypter getPolybiusNumberFor: $J.	self assert: result = '14'.	result := encrypter getPolybiusNumberFor: $S.	self assert: result = '43'.! !!EncrypterTest methodsFor: 'tests' stamp: 'jj 9/23/2013 21:24'!testRotation13On	|result|	result := encrypter rotation13On: 'joseph arthur johnston'.	self assert: result = 'WBFRCUNEGUHEWBUAFGBA'.	result := encrypter rotation13On: 'WBFRCUNEGUHEWBUAFGBA'.	self  assert: result = 'JOSEPHARTHURJOHNSTON'.	"ABCDEFGH I J KLM	 NOPQRSTUVWXYZ"! !!EncrypterTest methodsFor: 'tests' stamp: 'joejohnston 10/7/2013 08:50'!testSimpleChecksumOn	|result|	result := encrypter simpleChecksumOn: 'all work and no play'.	self assert: result = 66.	self assert: result hex = '16r42'. "42 hex = 66 decimal"! !!EncrypterTest methodsFor: 'tests' stamp: 'jj 9/23/2013 20:40'!testVigenereCipherUsingOn	| result message |	message := 'the rain in spain, falls mainlyin the plains'.	result := encrypter vigenereCipherUsing: 'works' on: message.	self assert: result = 'pvv bseb zx klozx, xwzcc ewwevqeb krw lzrsfo.	' onlyLetters asUppercase.! !TestCase subclass: #ThreeDimArrayTest	instanceVariableNames: 'cubeArray'	classVariableNames: ''	poolDictionaries: ''	category: 'Joe-Projects-Tests'!!ThreeDimArrayTest commentStamp: '<historical>' prior: 0!A ThreeDimArrayTest is a test class for testing the behavior of ThreeDimArray!!ThreeDimArrayTest methodsFor: 'tests-as yet unclassified' stamp: 'joejohnston 11/3/2013 12:34'!testSetUpArrays	self assert: cubeArray size = 4.	self assert: cubeArray first class = Array.	self assert: cubeArray first  size = 6.	self assert: cubeArray first  class = Array.	self assert: cubeArray first first  size = 7.	self assert: cubeArray first first  class = Array.	! !!ThreeDimArrayTest methodsFor: 'tests' stamp: 'joejohnston 11/2/2013 16:45'!setUp	cubeArray := ThreeDimArray newWith: 4 with: 6 with: 7.! !!ThreeDimArrayTest methodsFor: 'tests' stamp: 'joejohnston 11/9/2013 16:27'!testAtXAtYAtZPut	1 to: 4 do: [ :xCell | 		1 to: 6 do: [ :yCell | 			1 to: 7 do: [ :zCell | 				cubeArray					atX: xCell					atY: yCell					atZ: zCell					put: $X. ]. ]. ].	cubeArray		atX: 2		atY: 3		atZ: 1		put: $Y.	self assert: (cubeArray atX: 2 atY: 3 atZ: 1) = $Y.	self assert: (cubeArray list includes: $Y -> #(2 3 1)).	self assert: (cubeArray atX: 3 atY: 3 atZ: 1) = $X.	self assert: (cubeArray atX: 4 atY: 3 atZ: 1) = $X.! !!ThreeDimArrayTest methodsFor: 'tests' stamp: 'joejohnston 11/3/2013 13:35'!testInitialize	self assert: cubeArray list class = SortedCollection.! !TestCase subclass: #ChineseRemainderCubeTest	instanceVariableNames: 'CRCube'	classVariableNames: ''	poolDictionaries: ''	category: 'Joe-Projects-Tests'!!ChineseRemainderCubeTest methodsFor: 'tests-as yet unclassified' stamp: 'joejohnston 11/3/2013 13:44'!testFulcrum	self assert: CRCube fulcrum = 86.! !!ChineseRemainderCubeTest methodsFor: 'tests-as yet unclassified' stamp: 'joejohnston 11/9/2013 12:35'!testInitialize		self assert: CRCube primeSet class = Array.	self assert: CRCube primeSet size = 3.	self assert: CRCube coordSet class = Array.	self assert: CRCube coordSet size = 3.	self assert: CRCube primeSet first = 3.	self assert: CRCube primeSet second = 4.	self assert: CRCube primeSet third = 5.	"IE theyre NOT = to 4, 5 and 8"	CRCube coordSet: #(3 5 8).	self assert: CRCube coordSet first = 3.	self assert: CRCube coordSet second = 5.	self assert: CRCube coordSet third = 8.	CRCube primeSet: #(3 5 8).	self assert: CRCube primeSet first = 3.	self assert: CRCube primeSet second = 5.	self assert: CRCube primeSet third = 8.	self assert: CRCube primeProduct = (3 * 5 * 8).! !!ChineseRemainderCubeTest methodsFor: 'tests-as yet unclassified' stamp: 'joejohnston 11/3/2013 13:44'!testSolutionForForFor	self  assert: (CRCube solutionFor: 0 for: 0 for: 0) = 0.	self  assert: (CRCube solutionFor: 1 for: 1 for: 1) = 1.! !!ChineseRemainderCubeTest methodsFor: 'tests-as yet unclassified' stamp: 'joejohnston 11/2/2013 12:46'!testSolveForGroup	| result |	CRCube coordSet: #(2 2 1).	CRCube primeSet: #(3 4 5).	result := CRCube solveForGroup: 1.	self assert: result = 20.	result := CRCube solveForGroup: 2.	self assert: result = 30.	result := CRCube solveForGroup: 3.	self assert: result = 36.	result := CRCube solveForGroup: 4.	self assert: result = CRCube.! !!ChineseRemainderCubeTest methodsFor: 'tests' stamp: 'joejohnston 11/3/2013 13:43'!setUp	CRCube := ChineseRemainderCube new.	CRCube coordSet: #(2 2 1).	CRCube primeSet: #(3 4 5).! !!ChineseRemainderCubeTest methodsFor: 'tests' stamp: 'joejohnston 11/9/2013 16:47'!testFillCubeAndList	| cube list |	CRCube fillCubeAndList.	cube := CRCube cube.	list := CRCube list.	self assert: cube class = ThreeDimArray.	self assert: list class = SortedCollection.	self assert: list size = ((CRCube primeSet at: 1) * (CRCube primeSet at: 2) * (CRCube primeSet at: 3)).	list do: [ :each | 		| coords |		coords := each value.		self assert: each key = (cube atX: (coords at: 1) atY: (coords at: 2) atZ: (coords at: 3)). ].! !!ChineseRemainderCubeTest methodsFor: 'tests' stamp: 'joejohnston 11/3/2013 13:44'!testFirstFiveSolutions	self assert: CRCube firstFiveSolutions = #(26 86 146 206 266).! !!ChineseRemainderCubeTest methodsFor: 'tests' stamp: 'joejohnston 11/3/2013 13:44'!testFirstNSolutionsN	self assert: (CRCube firstNSolutionsN: 7) = #(26 86 146 206 266 326 386).! !!ChineseRemainderCubeTest methodsFor: 'tests' stamp: 'joejohnston 11/3/2013 13:44'!testFirstSolution	self assert: CRCube firstSolution = 26.! !!ChineseRemainderCubeTest methodsFor: 'tests' stamp: 'joejohnston 11/3/2013 13:44'!testSolutionDisplayString	self assert: CRCube solutionDisplayString = 'Any positive integer 86 +- 60'.! !'From Pharo2.0 of 7 March 2013 [Latest update: #20619] on 29 November 2013 at 6:34:54 pm'!!StringTest methodsFor: '*Joe-Projects-Tests' stamp: 'joejohnston 9/19/2013 15:28'!testInstancesOf	self assert: (string instancesOf: $a) = 2.	self assert: (string instancesOf: $H) = 1.	self assert: (string instancesOf: $i) = 2.	self assert: (string instancesOf: $I) = 1.	self assert: (string instancesOf: $,) = 1.! !'From Pharo2.0 of 7 March 2013 [Latest update: #20619] on 29 November 2013 at 6:34:54 pm'!!StringTest methodsFor: '*Joe-Projects-Tests' stamp: 'joejohnston 9/20/2013 06:59'!testInstancesOfSubstring	| string result |	string := 'abaabbaaababaaabaaaaab'.	result := string instancesOfSubstring: 'ab'.	self assert: result = 6.! !